{"version":3,"sources":["../../../es/redux.js","components/Counter.js","index.js"],"names":["randomString","Math","random","toString","substring","split","join","ActionTypes","INIT","REPLACE","PROBE_UNKNOWN_ACTION","isPlainObject","obj","proto","Object","getPrototypeOf","createChainStore","_x","_x2","_createChainStore","apply","this","arguments","asyncToGenerator","regenerator_default","a","mark","_callee","chainId","enhancer","_ref3","genesis","_ref","state","send","initialState","reducer","currentReducer","currentTxSender","currentState","currentChainState","currentListeners","nextListeners","currentChainListeners","nextChainListeners","isDispatching","ensureCanMutateNextListeners","ensureCanMutateNextChainListeners","getState","getChainState","subscribe","subscribeChain","dispatch","dispatchToChain","replaceReducer","observable","wrap","_context","prev","next","_ref2","outerSubscribe","observer","TypeError","observeState","unsubscribe","es","nextReducer","Error","type","action","then","result","console","log","resolvedState","chainListeners","i","length","listener","level","listeners","isSubscribedChain","push","index","indexOf","splice","isSubscribed","slice","genesis_time","chain_id","consensus_params","block","max_bytes","max_gas","time_iota_ms","evidence","max_age","validator","pub_key_types","validators","address","pub_key","value","power","name","app_hash","lotion_connect_default","nodes","sent","Function","abrupt","stop","Counter","_this$props","props","onIncrement","onDecrement","react_default","createElement","onClick","Component","store","rootEl","document","getElementById","nonce","render","ReactDOM","components_Counter","count"],"mappings":"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","file":"static/js/main.eafd4e48.chunk.js","sourcesContent":["import _regeneratorRuntime from \"/Users/davidvanisacker/Programming/Cosmos/redux-tendermint/examples/coinchain/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/davidvanisacker/Programming/Cosmos/redux-tendermint/examples/coinchain/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport $$observable from 'symbol-observable';\nimport connect from 'lotion-connect';\n/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\n\nvar randomString = function randomString() {\n  return Math.random().toString(36).substring(7).split('').join('.');\n};\n\nvar ActionTypes = {\n  INIT: \"@@redux/INIT\" + randomString(),\n  REPLACE: \"@@redux/REPLACE\" + randomString(),\n  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {\n    return \"@@redux/PROBE_UNKNOWN_ACTION\" + randomString();\n  }\n};\n/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\n\nfunction isPlainObject(obj) {\n  if (typeof obj !== 'object' || obj === null) return false;\n  var proto = obj;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(obj) === proto;\n}\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\n\nfunction createStore(reducer, preloadedState, enhancer) {\n  var _ref2;\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function.');\n  }\n\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = preloadedState;\n    preloadedState = undefined;\n  }\n\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error('Expected the enhancer to be a function.');\n    }\n\n    return enhancer(createStore)(reducer, preloadedState);\n  }\n\n  if (typeof reducer !== 'function') {\n    throw new Error('Expected the reducer to be a function.');\n  }\n\n  var currentReducer = reducer;\n  var currentState = preloadedState;\n  var currentListeners = [];\n  var nextListeners = currentListeners;\n  var isDispatching = false;\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = currentListeners.slice();\n    }\n  }\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns {any} The current state tree of your application.\n   */\n\n\n  function getState() {\n    if (isDispatching) {\n      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n\n    return currentState;\n  }\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param {Function} listener A callback to be invoked on every dispatch.\n   * @returns {Function} A function to remove this change listener.\n   */\n\n\n  function subscribe(listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('Expected the listener to be a function.');\n    }\n\n    if (isDispatching) {\n      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');\n    }\n\n    var isSubscribed = true;\n    ensureCanMutateNextListeners();\n    nextListeners.push(listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n\n      if (isDispatching) {\n        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');\n      }\n\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      var index = nextListeners.indexOf(listener);\n      nextListeners.splice(index, 1);\n      currentListeners = null;\n    };\n  }\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param {Object} action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns {Object} For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n\n\n  function dispatch(action) {\n    if (!isPlainObject(action)) {\n      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n    }\n\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n\n    if (isDispatching) {\n      throw new Error('Reducers may not dispatch actions.');\n    }\n\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n\n    var listeners = currentListeners = nextListeners;\n\n    for (var i = 0; i < listeners.length; i++) {\n      var listener = listeners[i];\n      listener();\n    }\n\n    return action;\n  }\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param {Function} nextReducer The reducer for the store to use instead.\n   * @returns {void}\n   */\n\n\n  function replaceReducer(nextReducer) {\n    if (typeof nextReducer !== 'function') {\n      throw new Error('Expected the nextReducer to be a function.');\n    }\n\n    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n\n    dispatch({\n      type: ActionTypes.REPLACE\n    });\n  }\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns {observable} A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n\n\n  function observable() {\n    var _ref;\n\n    var outerSubscribe = subscribe;\n    return _ref = {\n      /**\n       * The minimal observable subscription method.\n       * @param {Object} observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns {subscription} An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe: function subscribe(observer) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new TypeError('Expected the observer to be an object.');\n        }\n\n        function observeState() {\n          if (observer.next) {\n            observer.next(getState());\n          }\n        }\n\n        observeState();\n        var unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe: unsubscribe\n        };\n      }\n    }, _ref[$$observable] = function () {\n      return this;\n    }, _ref;\n  } // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n\n\n  dispatch({\n    type: ActionTypes.INIT\n  });\n  return _ref2 = {\n    dispatch: dispatch,\n    subscribe: subscribe,\n    getState: getState,\n    replaceReducer: replaceReducer\n  }, _ref2[$$observable] = observable, _ref2;\n}\n/**\n * Creates a Redux store that holds the state tree.\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [chainId] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\n\n\nfunction createChainStore(_x, _x2) {\n  return _createChainStore.apply(this, arguments);\n}\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\n\n\nfunction _createChainStore() {\n  _createChainStore = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(chainId, enhancer) {\n    var _ref3, genesis, _ref, state, send, initialState, reducer, currentReducer, currentTxSender, currentState, currentChainState, currentListeners, nextListeners, currentChainListeners, nextChainListeners, isDispatching, ensureCanMutateNextListeners, ensureCanMutateNextChainListeners, getState, getChainState, subscribe, subscribeChain, dispatch, dispatchToChain, replaceReducer, observable;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            observable = function _ref13() {\n              var _ref2;\n\n              var outerSubscribe = subscribe;\n              return _ref2 = {\n                /**\n                 * The minimal observable subscription method.\n                 * @param {Object} observer Any object that can be used as an observer.\n                 * The observer object should have a `next` method.\n                 * @returns {subscription} An object with an `unsubscribe` method that can\n                 * be used to unsubscribe the observable from the store, and prevent further\n                 * emission of values from the observable.\n                 */\n                subscribe: function subscribe(observer) {\n                  if (typeof observer !== 'object' || observer === null) {\n                    throw new TypeError('Expected the observer to be an object.');\n                  }\n\n                  function observeState() {\n                    if (observer.next) {\n                      observer.next(getState());\n                    }\n                  }\n\n                  observeState();\n                  var unsubscribe = outerSubscribe(observeState);\n                  return {\n                    unsubscribe: unsubscribe\n                  };\n                }\n              }, _ref2[$$observable] = function () {\n                return this;\n              }, _ref2;\n            };\n\n            replaceReducer = function _ref12(nextReducer) {\n              if (typeof nextReducer !== 'function') {\n                throw new Error('Expected the nextReducer to be a function.');\n              }\n\n              currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.\n              // Any reducers that existed in both the new and old rootReducer\n              // will receive the previous state. This effectively populates\n              // the new state tree with any relevant data from the old one.\n\n              dispatch({\n                type: ActionTypes.REPLACE\n              });\n            };\n\n            dispatchToChain = function _ref11(action) {\n              currentTxSender(action).then(function (result) {\n                console.log(result);\n                state.then(function (resolvedState) {\n                  currentChainState = resolvedState;\n                  var chainListeners = currentChainListeners = nextChainListeners;\n\n                  for (var i = 0; i < chainListeners.length; i++) {\n                    var listener = chainListeners[i];\n                    listener();\n                  }\n                });\n              });\n            };\n\n            dispatch = function _ref10(action) {\n              if (!isPlainObject(action)) {\n                throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');\n              }\n\n              if (typeof action.type === 'undefined') {\n                throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n              }\n\n              if (isDispatching) {\n                throw new Error('Reducers may not dispatch actions.');\n              }\n\n              try {\n                isDispatching = true;\n                currentState = currentReducer(currentState, action);\n              } finally {\n                isDispatching = false;\n              }\n\n              if (typeof action.level !== 'undefined' && action.level === 'chain') {\n                dispatchToChain(action);\n              }\n\n              var listeners = currentListeners = nextListeners;\n\n              for (var i = 0; i < listeners.length; i++) {\n                var listener = listeners[i];\n                listener();\n              }\n\n              return action;\n            };\n\n            subscribeChain = function _ref9(listener) {\n              if (typeof listener !== 'function') {\n                throw new Error('Expected the listener to be a function.');\n              }\n\n              if (isDispatching) {\n                throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');\n              }\n\n              var isSubscribedChain = true;\n              ensureCanMutateNextChainListeners();\n              nextChainListeners.push(listener);\n              return function unsubscribe() {\n                if (!isSubscribedChain) {\n                  return;\n                }\n\n                if (isDispatching) {\n                  throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');\n                }\n\n                isSubscribedChain = false;\n                ensureCanMutateNextChainListeners();\n                var index = nextChainListeners.indexOf(listener);\n                nextChainListeners.splice(index, 1);\n                currentChainListeners = null;\n              };\n            };\n\n            subscribe = function _ref8(listener) {\n              if (typeof listener !== 'function') {\n                throw new Error('Expected the listener to be a function.');\n              }\n\n              if (isDispatching) {\n                throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');\n              }\n\n              var isSubscribed = true;\n              ensureCanMutateNextListeners();\n              nextListeners.push(listener);\n              return function unsubscribe() {\n                if (!isSubscribed) {\n                  return;\n                }\n\n                if (isDispatching) {\n                  throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');\n                }\n\n                isSubscribed = false;\n                ensureCanMutateNextListeners();\n                var index = nextListeners.indexOf(listener);\n                nextListeners.splice(index, 1);\n                currentListeners = null;\n              };\n            };\n\n            getChainState = function _ref7() {\n              if (isDispatching) {\n                throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n              }\n\n              return currentChainState;\n            };\n\n            getState = function _ref6() {\n              if (isDispatching) {\n                throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n              }\n\n              return currentState;\n            };\n\n            ensureCanMutateNextChainListeners = function _ref5() {\n              if (nextChainListeners === currentChainListeners) {\n                nextChainListeners = currentChainListeners.slice();\n              }\n            };\n\n            ensureCanMutateNextListeners = function _ref4() {\n              if (nextListeners === currentListeners) {\n                nextListeners = currentListeners.slice();\n              }\n            };\n\n            if (!(typeof chainId === 'undefined')) {\n              _context.next = 12;\n              break;\n            }\n\n            throw new Error('Chain CGI is required');\n\n          case 12:\n            genesis = {\n              \"genesis_time\": \"2019-07-16T04:01:57.514745Z\",\n              \"chain_id\": \"test-chain-EqFkHD\",\n              \"consensus_params\": {\n                \"block\": {\n                  \"max_bytes\": \"22020096\",\n                  \"max_gas\": \"-1\",\n                  \"time_iota_ms\": \"1000\"\n                },\n                \"evidence\": {\n                  \"max_age\": \"100000\"\n                },\n                \"validator\": {\n                  \"pub_key_types\": [\"ed25519\"]\n                }\n              },\n              \"validators\": [{\n                \"address\": \"204A6C12238B70BABEC348C698751038EDADE17D\",\n                \"pub_key\": {\n                  \"type\": \"tendermint/PubKeyEd25519\",\n                  \"value\": \"y9KkFEQ3vufFyKwsIoggGOk/WYlR6eOwVNbvfnuYSX4=\"\n                },\n                \"power\": \"10\",\n                \"name\": \"\"\n              }],\n              \"app_hash\": \"\"\n            };\n            _context.next = 15;\n            return connect(chainId, {\n              nodes: ['ws://localhost:64340'],\n              genesis: genesis\n            });\n\n          case 15:\n            _ref = _context.sent;\n            state = _ref.state;\n            send = _ref.send;\n            _context.next = 20;\n            return state;\n\n          case 20:\n            initialState = _context.sent;\n            reducer = new Function(\"return \" + initialState.reducer)();\n\n            if (!(typeof enhancer !== 'undefined')) {\n              _context.next = 26;\n              break;\n            }\n\n            if (!(typeof enhancer !== 'function')) {\n              _context.next = 25;\n              break;\n            }\n\n            throw new Error('Expected the enhancer to be a function.');\n\n          case 25:\n            return _context.abrupt(\"return\", enhancer(createChainStore)(reducer, initialState));\n\n          case 26:\n            // We make a difference between commited state and chain state\n            currentReducer = reducer;\n            currentTxSender = send;\n            currentState = initialState;\n            currentChainState = initialState;\n            currentListeners = [];\n            nextListeners = currentListeners;\n            currentChainListeners = [];\n            nextChainListeners = currentChainListeners;\n            isDispatching = false;\n            /**\n             * This makes a shallow copy of currentListeners so we can use\n             * nextListeners as a temporary list while dispatching.\n             *\n             * This prevents any bugs around consumers calling\n             * subscribe/unsubscribe in the middle of a dispatch.\n             */\n\n            // When a store is created, an \"INIT\" action is dispatched so that every\n            // reducer returns their initial state. This effectively populates\n            // the initial state tree.\n            dispatch({\n              type: ActionTypes.INIT\n            });\n            return _context.abrupt(\"return\", (_ref3 = {\n              dispatch: dispatch,\n              subscribe: subscribe,\n              subscribeChain: subscribeChain,\n              getState: getState,\n              getChainState: getChainState,\n              replaceReducer: replaceReducer\n            }, _ref3[$$observable] = observable, _ref3));\n\n          case 37:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createChainStore.apply(this, arguments);\n}\n\nfunction warning(message) {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n\n}\n\nfunction getUndefinedStateErrorMessage(key, action) {\n  var actionType = action && action.type;\n  var actionDescription = actionType && \"action \\\"\" + String(actionType) + \"\\\"\" || 'an action';\n  return \"Given \" + actionDescription + \", reducer \\\"\" + key + \"\\\" returned undefined. \" + \"To ignore an action, you must explicitly return the previous state. \" + \"If you want this reducer to hold no value, you can return null instead of undefined.\";\n}\n\nfunction getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {\n  var reducerKeys = Object.keys(reducers);\n  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n\n  if (!isPlainObject(inputState)) {\n    return \"The \" + argumentName + \" has unexpected type of \\\"\" + {}.toString.call(inputState).match(/\\s([a-z|A-Z]+)/)[1] + \"\\\". Expected argument to be an object with the following \" + (\"keys: \\\"\" + reducerKeys.join('\", \"') + \"\\\"\");\n  }\n\n  var unexpectedKeys = Object.keys(inputState).filter(function (key) {\n    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];\n  });\n  unexpectedKeys.forEach(function (key) {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n\n  if (unexpectedKeys.length > 0) {\n    return \"Unexpected \" + (unexpectedKeys.length > 1 ? 'keys' : 'key') + \" \" + (\"\\\"\" + unexpectedKeys.join('\", \"') + \"\\\" found in \" + argumentName + \". \") + \"Expected to find one of the known reducer keys instead: \" + (\"\\\"\" + reducerKeys.join('\", \"') + \"\\\". Unexpected keys will be ignored.\");\n  }\n}\n\nfunction assertReducerShape(reducers) {\n  Object.keys(reducers).forEach(function (key) {\n    var reducer = reducers[key];\n    var initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n\n    if (typeof initialState === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined during initialization. \" + \"If the state passed to the reducer is undefined, you must \" + \"explicitly return the initial state. The initial state may \" + \"not be undefined. If you don't want to set a value for this reducer, \" + \"you can use null instead of undefined.\");\n    }\n\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === 'undefined') {\n      throw new Error(\"Reducer \\\"\" + key + \"\\\" returned undefined when probed with a random type. \" + (\"Don't try to handle \" + ActionTypes.INIT + \" or other actions in \\\"redux/*\\\" \") + \"namespace. They are considered private. Instead, you must return the \" + \"current state for any unknown actions, unless it is undefined, \" + \"in which case you must return the initial state, regardless of the \" + \"action type. The initial state may not be undefined, but can be null.\");\n    }\n  });\n}\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @param {Object} reducers An object whose values correspond to different\n * reducer functions that need to be combined into one. One handy way to obtain\n * it is to use ES6 `import * as reducers` syntax. The reducers may never return\n * undefined for any action. Instead, they should return their initial state\n * if the state passed to them was undefined, and the current state for any\n * unrecognized action.\n *\n * @returns {Function} A reducer function that invokes every reducer inside the\n * passed object, and builds a state object with the same shape.\n */\n\n\nfunction combineReducers(reducers) {\n  var reducerKeys = Object.keys(reducers);\n  var finalReducers = {};\n\n  for (var i = 0; i < reducerKeys.length; i++) {\n    var key = reducerKeys[i];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(\"No reducer provided for key \\\"\" + key + \"\\\"\");\n      }\n    }\n\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same\n  // keys multiple times.\n\n  var unexpectedKeyCache;\n\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {};\n  }\n\n  var shapeAssertionError;\n\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n\n  return function combination(state, action) {\n    if (state === void 0) {\n      state = {};\n    }\n\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n\n    var hasChanged = false;\n    var nextState = {};\n\n    for (var _i = 0; _i < finalReducerKeys.length; _i++) {\n      var _key = finalReducerKeys[_i];\n      var reducer = finalReducers[_key];\n      var previousStateForKey = state[_key];\n      var nextStateForKey = reducer(previousStateForKey, action);\n\n      if (typeof nextStateForKey === 'undefined') {\n        var errorMessage = getUndefinedStateErrorMessage(_key, action);\n        throw new Error(errorMessage);\n      }\n\n      nextState[_key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n\n    return hasChanged ? nextState : state;\n  };\n}\n\nfunction bindActionCreator(actionCreator, dispatch) {\n  return function () {\n    return dispatch(actionCreator.apply(this, arguments));\n  };\n}\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\n\n\nfunction bindActionCreators(actionCreators, dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(\"bindActionCreators expected an object or a function, instead received \" + (actionCreators === null ? 'null' : typeof actionCreators) + \". \" + \"Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\");\n  }\n\n  var boundActionCreators = {};\n\n  for (var key in actionCreators) {\n    var actionCreator = actionCreators[key];\n\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n\n  return boundActionCreators;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    keys.push.apply(keys, Object.getOwnPropertySymbols(object));\n  }\n\n  if (enumerableOnly) keys = keys.filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n  });\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for\n * the resulting composite function.\n *\n * @param {...Function} funcs The functions to compose.\n * @returns {Function} A function obtained by composing the argument functions\n * from right to left. For example, compose(f, g, h) is identical to doing\n * (...args) => f(g(h(...args))).\n */\n\n\nfunction compose() {\n  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(void 0, arguments));\n    };\n  });\n}\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param {...Function} middlewares The middleware chain to be applied.\n * @returns {Function} A store enhancer applying the middleware.\n */\n\n\nfunction applyMiddleware() {\n  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n    middlewares[_key] = arguments[_key];\n  }\n\n  return function (createStore) {\n    return function () {\n      var store = createStore.apply(void 0, arguments);\n\n      var _dispatch = function dispatch() {\n        throw new Error('Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n      };\n\n      var middlewareAPI = {\n        getState: store.getState,\n        dispatch: function dispatch() {\n          return _dispatch.apply(void 0, arguments);\n        }\n      };\n      var chain = middlewares.map(function (middleware) {\n        return middleware(middlewareAPI);\n      });\n      _dispatch = compose.apply(void 0, chain)(store.dispatch);\n      return _objectSpread2({}, store, {\n        dispatch: _dispatch\n      });\n    };\n  };\n}\n/*\n * This is a dummy function to check if the function name has been altered by minification.\n * If the function has been minified and NODE_ENV !== 'production', warn the user.\n */\n\n\nfunction isCrushed() {}\n\nif (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {\n  warning('You are currently using minified code outside of NODE_ENV === \"production\". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');\n}\n\nexport { ActionTypes as __DO_NOT_USE__ActionTypes, applyMiddleware, bindActionCreators, combineReducers, compose, createChainStore, createStore };","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Counter extends Component {\n  render() {\n    const { value, onIncrement, onDecrement } = this.props\n    return (\n      <p>\n        Counter: {value}\n        {' '}\n        <button onClick={onIncrement}>\n          +\n        </button>\n        {' '}\n        {' '}\n        <button onClick={onDecrement}>\n          -\n        </button>\n        {' '}\n      </p>\n    )\n  }\n}\n\nCounter.propTypes = {\n  value: PropTypes.number.isRequired,\n  onIncrement: PropTypes.func.isRequired,\n  onDecrement: PropTypes.func.isRequired\n}\n\nexport default Counter\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createChainStore } from 'redux-tendermint'\nimport Counter from './components/Counter'\n\nconst GCI = '479a38bbccbf12d9ce8926dc02d39288b7040cde909a650dd8f80f89dd56c66f'\n\nconst genesis = {\n  \"genesis_time\": \"2019-07-16T16:49:57.625492Z\",\n  \"chain_id\": \"test-chain-ekqxQm\",\n  \"consensus_params\": {\n    \"block\": {\n      \"max_bytes\": \"22020096\",\n      \"max_gas\": \"-1\",\n      \"time_iota_ms\": \"1000\"\n    },\n    \"evidence\": {\n      \"max_age\": \"100000\"\n    },\n    \"validator\": {\n      \"pub_key_types\": [\n        \"ed25519\"\n      ]\n    }\n  },\n  \"validators\": [\n    {\n      \"address\": \"835F678B2B5CF5BF4EEC23B38216A4C2FEACCDE0\",\n      \"pub_key\": {\n        \"type\": \"tendermint/PubKeyEd25519\",\n        \"value\": \"4jnoM1OkwAY4URaSLNFFiI4U0PROHAA1H1eHTNB3+NA=\"\n      },\n      \"power\": \"10\",\n      \"name\": \"\"\n    }\n  ],\n  \"app_hash\": \"\"\n}\n\ncreateChainStore(GCI, genesis)\n.then(store => {\n  const rootEl = document.getElementById('root')\n  let nonce = 0\n\n  const render = () => ReactDOM.render(\n    <Counter\n      value={store.getState().count}\n      onIncrement={() => store.dispatch({ level: 'chain', nonce: ++nonce, type: 'INCREMENT' })}\n      onDecrement={() => store.dispatch({ level: 'chain', nonce: ++nonce, type: 'DECREMENT' })}\n    />,\n    rootEl\n  )\n\n  render()\n\n  store.subscribe(render)\n  store.subscribe(() => console.log('State', store.getState()))\n  store.subscribeChain(() => console.log('Chain State', store.getChainState()))\n})"],"sourceRoot":""}